{"version":3,"sources":["webpack:///webpack/bootstrap 3073ddd26a71d29362f8","webpack:///./lib/util/constants.ts","webpack:///external \"msRest\"","webpack:///./lib/msRestAzure.ts","webpack:///./lib/azureServiceClient.ts","webpack:///./lib/pollingState.ts","webpack:///./lib/cloudError.ts","webpack:///./lib/baseResource.ts"],"names":[],"mappings":"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","file":"msRestAzureBundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3073ddd26a71d29362f8","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nconst Constants = {\n  /**\n  * Defines constants for long running operation states.\n  *\n  * @const\n  * @type {string}\n  */\n  LongRunningOperationStates: {\n    InProgress: 'InProgress',\n    Succeeded: 'Succeeded',\n    Failed: 'Failed',\n    Canceled: 'Canceled'\n  },\n\n  /**\n   * The default language in the request header.\n   *\n   * @const\n   * @type {string}\n   */\n  DEFAULT_LANGUAGE: 'en-us',\n\n  /**\n   * The ms-rest-azure version.\n   * @const\n   * @type {string}\n   */\n  msRestAzureVersion: '3.0.0'\n};\n\nexport default Constants;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/util/constants.ts","module.exports = msRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRest\"\n// module id = 1\n// module chunks = 0","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { AzureServiceClientOptions, AzureServiceClient } from './azureServiceClient';\nimport Constants from './util/constants';\nimport { CloudError, CloudErrorMapper } from './cloudError';\nimport { BaseResource, BaseResourceMapper } from './baseResource';\nexport { AzureServiceClient, AzureServiceClientOptions, Constants, CloudError, CloudErrorMapper, BaseResource, BaseResourceMapper };\n\n\n// WEBPACK FOOTER //\n// ./lib/msRestAzure.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information. \n\nimport * as msRest from 'ms-rest-ts';\nimport Constants from './util/constants';\nimport PollingState from './pollingState';\nconst LroStates = Constants.LongRunningOperationStates;\n\n/**\n * Options to be provided while creating the client. \n */\nexport interface AzureServiceClientOptions extends msRest.ServiceClientOptions {\n  /**\n   * @property {string} [options.acceptLanguage] - Gets or sets the preferred language for the response. Default value is: 'en-US'.\n   */\n  acceptLanguage?: string;\n\n  /**\n   * @property {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value \n   * is generated and included in each request. Default is true.\n   */\n  generateClientRequestId?: boolean;\n\n  /**\n   * @property {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for \n   * Long Running Operations. Default value is 30.\n   */\n  longRunningOperationRetryTimeout?: number;\n\n  /**\n   * @property {number} [rpRegistrationRetryTimeout] - Gets or sets the retry timeout in seconds for \n   * AutomaticRPRegistration. Default value is 30 seconds.\n   */\n  rpRegistrationRetryTimeout?: number;\n}\n\n/**\n * @class\n * Initializes a new instance of the AzureServiceClient class.\n * @constructor\n * \n * @param {msRest.ServiceClientCredentilas} credentials - ApplicationTokenCredentials or \n * UserTokenCredentials object used for authentication.  \n * @param {AzureServiceClientOptions} options - The parameter options used by AzureServiceClient\n */\nexport class AzureServiceClient extends msRest.ServiceClient {\n  acceptLanguage: string = Constants.DEFAULT_LANGUAGE;\n  generateClientRequestId: boolean = true;\n  longRunningOperationRetryTimeout: number = 30;\n  rpRegistrationRetryTimeout: number = 30;\n\n  constructor(credentials: msRest.ServiceClientCredentials, options?: AzureServiceClientOptions) {\n    super(credentials, options);\n    this.acceptLanguage = Constants.DEFAULT_LANGUAGE;\n    this.generateClientRequestId = true;\n    this.longRunningOperationRetryTimeout = 30;\n    if (!options) options = {};\n\n    if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\n      this.acceptLanguage = options.acceptLanguage;\n    }\n\n    if (options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {\n      this.generateClientRequestId = options.generateClientRequestId;\n    }\n\n    if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\n    }\n\n    if (options.rpRegistrationRetryTimeout !== null && options.rpRegistrationRetryTimeout !== undefined) {\n      this.rpRegistrationRetryTimeout = options.rpRegistrationRetryTimeout;\n    }\n\n    try {\n      const moduleName = 'ms-rest-azure';\n      const moduleVersion = Constants.msRestAzureVersion;\n      this.addUserAgentInfo(`${moduleName}/${moduleVersion}`);\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  /**\n   * Provides a mechanism to make a request that will poll and provide the final result.\n   * @param {msRest.RequestPrepareOptions|msRest.WebResource} request - The request object\n   * @param {msRest.RequestOptionsBase} [options] Additional options to be sent while making the request\n   * @returns {Promise<msRest.HttpOperationResponse>} The HttpOperationResponse containing the final polling request, response and the responseBody.\n   */\n  async sendLongRunningRequest(request: msRest.RequestPrepareOptions | msRest.WebResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let self = this;\n    let initialResponse: msRest.HttpOperationResponse;\n    try {\n      initialResponse = await self.sendRequest(request);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    let finalResponse: msRest.HttpOperationResponse;\n    try {\n      finalResponse = await self.getLongRunningOperationResult(initialResponse, options);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(finalResponse);\n  }\n\n  /**\n   * Verified whether an unexpected polling status code for long running operation was received for the response of the initial request.\n   * @param {msRest.HttpOperationResponse} initialResponse - Response to the initial request that was sent as a part of the asynchronous operation.\n   */\n  private checkResponseStatusCodeFailed(initialResponse: msRest.HttpOperationResponse): boolean {\n    let statusCode = initialResponse.response.status;\n    let method = initialResponse.request.method;\n    if (statusCode === 200 || statusCode === 202 ||\n      (statusCode === 201 && method === 'PUT') ||\n      (statusCode === 204 && (method === 'DELETE' || method === 'POST'))) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  //goal is to get this working without using the async package and simply using async and Promise.\n  /**\n   * Poll Azure long running PUT, PATCH, POST or DELETE operations.\n   * @param {msRest.HttpOperationResponse} resultOfInitialRequest - result/response of the initial request which is a part of the asynchronous polling operation.\n   * @param {msRest.RequestOptionsBase} [options] - custom request options.\n   * @returns {Promise<msRest.HttpOperationResponse>} result - The final response after polling is complete.\n   */\n  async getLongRunningOperationResult(resultOfInitialRequest: msRest.HttpOperationResponse, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let self = this;\n    let initialRequestMethod: string = resultOfInitialRequest.request.method as msRest.HttpMethods;\n\n    if (self.checkResponseStatusCodeFailed(resultOfInitialRequest)) {\n      return Promise.reject(`Unexpected polling status code from long running operation ` +\n        `\"${resultOfInitialRequest.response.status}\" for method \"${initialRequestMethod}\".`);\n    }\n    let pollingState: PollingState;\n    try {\n      pollingState = new PollingState(resultOfInitialRequest, self.longRunningOperationRetryTimeout);\n      pollingState.optionsOfInitialRequest = options as msRest.RequestOptionsBase;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    let resourceUrl: string = resultOfInitialRequest.request.url;\n    while (![LroStates.Succeeded, LroStates.Failed, LroStates.Canceled].some((e) => { return e === pollingState.status; })) {\n      await msRest.delay(pollingState.getTimeout());\n      if (pollingState.azureAsyncOperationHeaderLink) {\n        await self.updateStateFromAzureAsyncOperationHeader(pollingState, true);\n      } else if (pollingState.locationHeaderLink) {\n        await self.updateStateFromLocationHeader(initialRequestMethod, pollingState);\n      } else if (initialRequestMethod === 'PUT') {\n        await self.updateStateFromGetResourceOperation(resourceUrl, pollingState);\n      } else {\n        return Promise.reject(new Error('Location header is missing from long running operation.'));\n      }\n    }\n\n    if (pollingState.status === LroStates.Succeeded) {\n      if ((pollingState.azureAsyncOperationHeaderLink || !pollingState.resource) &&\n        (initialRequestMethod === 'PUT' || initialRequestMethod === 'PATCH')) {\n        await self.updateStateFromGetResourceOperation(resourceUrl, pollingState);\n        return Promise.resolve(pollingState.getOperationResponse());\n      } else {\n        return Promise.resolve(pollingState.getOperationResponse());\n      }\n    } else {\n      return Promise.reject(pollingState.getRestError());\n    }\n  }\n\n  /**\n   * Retrieve operation status by polling from 'azure-asyncoperation' header.\n   * @param {PollingState} pollingState - The object to persist current operation state.\n   * @param {boolean} inPostOrDelete - Invoked by Post Or Delete operation.\n   */\n  private async updateStateFromAzureAsyncOperationHeader(pollingState: PollingState, inPostOrDelete: boolean = false): Promise<void> {\n    let result: msRest.HttpOperationResponse;\n\n    try {\n      result = await this.getStatus(pollingState.azureAsyncOperationHeaderLink as string, pollingState.optionsOfInitialRequest);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    let parsedResponse = result.bodyAsJson as { [key: string]: any };\n\n    if (!parsedResponse) {\n      return Promise.reject(new Error('The response from long running operation does not contain a body.'));\n    } else if (parsedResponse && !parsedResponse.status) {\n      return Promise.reject(new Error(`The response \"${result.bodyAsText}\" from long running operation does not contain the status property.`));\n    }\n    pollingState.status = parsedResponse.status;\n    pollingState.error = parsedResponse.error;\n    pollingState.updateResponse(result.response);\n    pollingState.request = result.request;\n    pollingState.resource = null;\n    if (inPostOrDelete) {\n      pollingState.resource = result.bodyAsJson;\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Retrieve PUT operation status by polling from 'location' header.\n   * @param {string} method - The HTTP method.\n   * @param {PollingState} pollingState - The object to persist current operation state.\n   */\n  private async updateStateFromLocationHeader(method: string, pollingState: PollingState): Promise<void> {\n    let result: msRest.HttpOperationResponse;\n    try {\n      result = await this.getStatus(pollingState.locationHeaderLink as string, pollingState.optionsOfInitialRequest);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    let parsedResponse = result.bodyAsJson as { [key: string]: any };\n    pollingState.updateResponse(result.response);\n    pollingState.request = result.request;\n    let statusCode = result.response.status;\n    if (statusCode === 202) {\n      pollingState.status = LroStates.InProgress;\n    } else if (statusCode === 200 ||\n      (statusCode === 201 && (method === 'PUT' || method === 'PATCH')) ||\n      (statusCode === 204 && (method === 'DELETE' || method === 'POST'))) {\n      pollingState.status = LroStates.Succeeded;\n      pollingState.resource = parsedResponse;\n      //we might not throw an error, but initialize here just in case.\n      pollingState.error = new msRest.RestError(`Long running operation failed with status \"${pollingState.status}\".`);\n      pollingState.error.code = pollingState.status;\n    } else {\n      return Promise.reject(new Error(`The response with status code ${statusCode} from polling for ` +\n        `long running operation url \"${pollingState.locationHeaderLink}\" is not valid.`));\n    }\n  }\n\n  /**\n   * Polling for resource status.\n   * @param {string} resourceUrl - The url of resource.\n   * @param {PollingState} pollingState - The object to persist current operation state.\n   */\n  private async updateStateFromGetResourceOperation(resourceUrl: string, pollingState: PollingState): Promise<void> {\n    let result: msRest.HttpOperationResponse;\n    try {\n      result = await this.getStatus(resourceUrl, pollingState.optionsOfInitialRequest);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (!result.bodyAsJson) {\n      return Promise.reject(new Error('The response from long running operation does not contain a body.'));\n    }\n\n    let parsedResponse = result.bodyAsJson as { [key: string]: any };\n    pollingState.status = LroStates.Succeeded;\n    if (parsedResponse && parsedResponse.properties && parsedResponse.properties.provisioningState) {\n      pollingState.status = parsedResponse.properties.provisioningState;\n    }\n    pollingState.updateResponse(result.response);\n    pollingState.request = result.request;\n    pollingState.resource = parsedResponse;\n    //we might not throw an error, but initialize here just in case.\n    pollingState.error = new msRest.RestError(`Long running operation failed with status \"${pollingState.status}\".`);\n    pollingState.error.code = pollingState.status;\n    return Promise.resolve();\n  }\n\n  /**\n   * Retrieves operation status by querying the operation URL.\n   * @param {string} operationUrl - URL used to poll operation result.\n   * @param {object} options - Options that can be set on the request object\n   */\n  private async getStatus(operationUrl: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let self = this;\n    // Construct URL\n    let requestUrl = operationUrl.replace(' ', '%20');\n    // Create HTTP request object\n    let httpRequest: msRest.RequestPrepareOptions = {\n      method: 'GET',\n      url: requestUrl,\n      headers: {}\n    };\n    if (options) {\n      let customHeaders: { [key: string]: string } = (options.customHeaders as { [key: string]: string })\n      for (let headerName in customHeaders) {\n        if (customHeaders.hasOwnProperty(headerName)) {\n          (httpRequest.headers as { [key: string]: string })[headerName] = customHeaders[headerName];\n        }\n      }\n    }\n    let operationResponse: msRest.HttpOperationResponse;\n    try {\n      operationResponse = await self.sendRequest(httpRequest);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    let statusCode = operationResponse.response.status;\n    let responseBody = operationResponse.bodyAsJson;\n    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 204) {\n      let error = new msRest.RestError(`Invalid status code with response body \"${operationResponse.bodyAsText}\" occurred ` +\n        `when polling for operation status.`);\n      error.statusCode = statusCode;\n      error.request = msRest.stripRequest(operationResponse.request);\n      error.response = operationResponse.response;\n      try {\n        error.body = responseBody;\n      } catch (badResponse) {\n        error.message += ` Error \"${badResponse}\" occured while deserializing the response body - \"${operationResponse.bodyAsText}\".`;\n        error.body = operationResponse.bodyAsText;\n      }\n      return Promise.reject(error);\n    }\n\n    return Promise.resolve(operationResponse);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/azureServiceClient.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information. \n\nimport Constants from './util/constants';\nimport * as msRest from 'ms-rest-ts';\nconst LroStates = Constants.LongRunningOperationStates;\n\n/**\n * @class\n * Initializes a new instance of the PollingState class.\n */\nexport default class PollingState {\n  /**\n   * @param {msRest.HttpOperationResponse} [response] - Response of the initial request that was made as a part of the asynchronous operation.\n   */\n  resultOfInitialRequest: msRest.HttpOperationResponse;\n  /**\n   * @param {msRest.RequestOptionsBase} [optionsOfInitialRequest] - Request options that were provided as a part of the initial request.\n   */\n  optionsOfInitialRequest: msRest.RequestOptionsBase;\n  /**\n   * @param {msRest.WebResource} [request] - provides information about the request made for polling.\n   */\n  request: msRest.WebResource;\n  /**\n   * @param {Response} [response] - The response object to extract longrunning operation status.\n   */\n  response: Response;\n  /**\n   * @param {any} [resource] - Provides information about the response body received in the polling request. Particularly useful when polling via provisioningState.\n   */\n  resource: any;\n  /**\n   * @param {number} [retryTimeout] - The timeout in seconds to retry on intermediate operation results. Default Value is 30.\n   */\n  retryTimeout?: number = 30;\n  /**\n   * @param {string} [azureAsyncOperationHeaderLink] - The url that is present in \"azure-asyncoperation\" response header.\n   */\n  azureAsyncOperationHeaderLink?: string;\n  /**\n   * @param {string} [locationHeaderLink] - The url that is present in \"Location\" response header.\n   */\n  locationHeaderLink?: string;\n  /**\n   * @param {string} [status] - The status of polling. \"Succeeded, Failed, Cancelled, Updating, Creating, etc.\"\n   */\n  status?: string;\n  /**\n   * @param {msRest.RestError} [error] - Provides information about the error that happened while polling.\n   */\n  error?: msRest.RestError;\n\n  constructor(resultOfInitialRequest: msRest.HttpOperationResponse, retryTimeout: number = 30) {\n    this.resultOfInitialRequest = resultOfInitialRequest;\n    this.retryTimeout = retryTimeout;\n    this.updateResponse(resultOfInitialRequest.response);\n    this.request = resultOfInitialRequest.request;\n    //Parse response.body & assign it as the resource\n    try {\n      if (resultOfInitialRequest.bodyAsText && resultOfInitialRequest.bodyAsText.length > 0) {\n        this.resource = JSON.parse(resultOfInitialRequest.bodyAsText);\n      } else {\n        this.resource = resultOfInitialRequest.bodyAsJson;\n      }\n    } catch (error) {\n      let deserializationError = new msRest.RestError(`Error \"${error}\" occurred in parsing the responseBody ' +\n        'while creating the PollingState for Long Running Operation- \"${resultOfInitialRequest.bodyAsText}\"`);\n      deserializationError.request = resultOfInitialRequest.request;\n      deserializationError.response = resultOfInitialRequest.response;\n      throw deserializationError;\n    }\n    switch (this.response.status) {\n      case 202:\n        this.status = LroStates.InProgress;\n        break;\n\n      case 204:\n        this.status = LroStates.Succeeded;\n        break;\n\n      case 201:\n        if (this.resource && this.resource.properties && this.resource.properties.provisioningState) {\n          this.status = this.resource.properties.provisioningState;\n        } else {\n          this.status = LroStates.InProgress;\n        }\n        break;\n\n      case 200:\n        if (this.resource && this.resource.properties && this.resource.properties.provisioningState) {\n          this.status = this.resource.properties.provisioningState;\n        } else {\n          this.status = LroStates.Succeeded;\n        }\n        break;\n\n      default:\n        this.status = LroStates.Failed;\n        break;\n    }\n  }\n\n  /**\n   * Update cached data using the provided response object\n   * @param {Response} [response] - provider response object.\n   */\n  updateResponse(response: Response) {\n    this.response = response;\n    if (response && response.headers) {\n      let asyncOperationHeader: string | null | undefined = response.headers.get('azure-asyncoperation');\n      let locationHeader: string | null | undefined = response.headers.get('location');\n      if (asyncOperationHeader) {\n        this.azureAsyncOperationHeaderLink = asyncOperationHeader;\n      }\n\n      if (locationHeader) {\n        this.locationHeaderLink = locationHeader;\n      }\n    }\n  }\n\n  /**\n   * Gets timeout in milliseconds. \n   * @returns {number} timeout\n   */\n  getTimeout() {\n    if (this.retryTimeout || this.retryTimeout === 0) {\n      return this.retryTimeout * 1000;\n    }\n    if (this.response) {\n      let retryAfter: string | null | undefined = this.response.headers.get('retry-after');\n      if (retryAfter) {\n        return parseInt(retryAfter) * 1000;\n      }\n    }\n    return 30 * 1000;\n  }\n\n  /**\n   * Returns long running operation result.\n   * @returns {msRest.HttpOperationResponse} HttpOperationResponse\n   */\n  getOperationResponse(): msRest.HttpOperationResponse {\n    let result = new msRest.HttpOperationResponse(this.request, this.response, this.response.body);\n    if (this.resource && typeof this.resource.valueOf() === 'string') {\n      result.bodyAsText = this.resource;\n      result.bodyAsJson = JSON.parse(this.resource);\n    } else {\n      result.bodyAsJson = this.resource;\n      result.bodyAsText = JSON.stringify(this.resource);\n    }\n    return result;\n  }\n\n  /**\n   * Returns an Error on operation failure.\n   * @param {Error} err - The error object.\n   * @returns {msRest.RestError} The RestError defined in the runtime.\n   */\n  getRestError(err?: Error): msRest.RestError {\n    let errMsg: string;\n    let errCode: string | null = null;\n\n    let error = new msRest.RestError('');\n    error.request = msRest.stripRequest(this.request);\n    error.response = this.response;\n    let parsedResponse = this.resource as { [key: string]: any };\n\n    if (err && err.message) {\n      errMsg = `Long running operation failed with error: \"${err.message}\".`;\n    } else {\n      errMsg = `Long running operation failed with status: \"${this.status}\".`;\n    }\n\n    if (parsedResponse) {\n      if (parsedResponse.error && parsedResponse.error.message) {\n        errMsg = `Long running operation failed with error: \"${parsedResponse.error.message}\".`;\n      }\n      if (parsedResponse.error && parsedResponse.error.code) {\n        errCode = parsedResponse.error.code as string;\n      }\n    }\n\n    error.message = errMsg;\n    if (errCode) error.code = errCode;\n    error.body = parsedResponse;\n    return error;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/pollingState.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\n\r\n/**\r\n * @class\r\n * Provides additional information about an http error response returned from a Microsoft Azure service.\r\n */\r\nexport interface CloudError extends Error {\r\n  /**\r\n   * @property {string} code The error code parsed from the body of the http error response.\r\n   */\r\n  code: string;\r\n  /**\r\n  * @property {string} message The error message parsed from the body of the http error response.\r\n  */\r\n  message: string;\r\n  /**\r\n  * @property {string} [target] The target of the error.\r\n  */\r\n  target?: string;\r\n  /**\r\n  * @property {Array<CloudError>} [details] An array of CloudError objects specifying the details.\r\n  */\r\n  details?: Array<CloudError>;\r\n}\r\n\r\nexport const CloudErrorMapper = {\r\n  required: false,\r\n  serializedName: 'CloudError',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'CloudError',\r\n    modelProperties: {\r\n      code: {\r\n        required: true,\r\n        serializedName: 'code',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      message: {\r\n        required: true,\r\n        serializedName: 'message',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      target: {\r\n        required: false,\r\n        serializedName: 'target',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      details: {\r\n        required: false,\r\n        serializedName: 'details',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n            required: false,\r\n            serializedName: 'CloudErrorElementType',\r\n            type: {\r\n              name: 'Composite',\r\n              className: 'CloudError'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\n\n\n// WEBPACK FOOTER //\n// ./lib/cloudError.ts","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\n\r\n/**\r\n * @class\r\n * An empty interface.\r\n */\r\nexport interface BaseResource { }\r\n\r\nexport const BaseResourceMapper = {\r\n  required: false,\r\n  serializedName: 'BaseResource',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'BaseResource',\r\n    modelProperties: {\r\n    }\r\n  }\r\n};\n\n\n// WEBPACK FOOTER //\n// ./lib/baseResource.ts"],"sourceRoot":""}